{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kumar.s\\\\Desktop\\\\Tutorial\\\\Tutorial-App\\\\client\\\\src\\\\components\\\\PrivateRoute.js\";\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  const isAuth = useSelector(state => state.auth.isAuthenticated); // console.log(auth);\n\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: props => isAuth === true ? React.createElement(Component, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    })) : React.createElement(Redirect, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }));\n};\n\nexport default PrivateRoute;","map":{"version":3,"sources":["C:/Users/kumar.s/Desktop/Tutorial/Tutorial-App/client/src/components/PrivateRoute.js"],"names":["React","Route","Redirect","useSelector","PrivateRoute","component","Component","rest","isAuth","state","auth","isAuthenticated","props"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,KAAuC;AACzD,QAAMC,MAAM,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,eAArB,CAA1B,CADyD,CAEzD;;AACA,SACG,oBAAC,KAAD,oBACOJ,IADP;AAEG,IAAA,MAAM,EAAEK,KAAK,IACVJ,MAAM,KAAK,IAAX,GACG,oBAAC,SAAD,oBAAeI,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADH,GAGG,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADH;AAYF,CAfD;;AAiBA,eAAeR,YAAf","sourcesContent":["import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n   const isAuth = useSelector(state => state.auth.isAuthenticated);\n   // console.log(auth);\n   return (\n      <Route\n         {...rest}\n         render={props =>\n            isAuth === true ? (\n               <Component {...props} />\n            ) : (\n               <Redirect to=\"/login\" />\n            )\n         }\n      />\n   );\n};\n\nexport default PrivateRoute;\n"]},"metadata":{},"sourceType":"module"}