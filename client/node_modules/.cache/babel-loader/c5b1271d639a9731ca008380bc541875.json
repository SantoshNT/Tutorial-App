{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _colorLuminance = require('./utils');\n\nvar _getModal = require('./handle-swal-dom');\n\nvar _hasClass$isDescendant = require('./handle-dom');\n/*\r\n * User clicked on \"Confirm\"/\"OK\" or \"Cancel\"\r\n */\n\n\nvar handleButton = function handleButton(event, params, modal) {\n  var e = event || window.event;\n  var target = e.target || e.srcElement;\n  var targetedConfirm = target.className.indexOf('confirm') !== -1;\n  var targetedOverlay = target.className.indexOf('sweet-overlay') !== -1;\n\n  var modalIsVisible = _hasClass$isDescendant.hasClass(modal, 'visible');\n\n  var doneFunctionExists = params.doneFunction && modal.getAttribute('data-has-done-function') === 'true'; // Since the user can change the background-color of the confirm button programmatically,\n  // we must calculate what the color should be on hover/active\n\n  var normalColor, hoverColor, activeColor;\n\n  if (targetedConfirm && params.confirmButtonColor) {\n    normalColor = params.confirmButtonColor;\n    hoverColor = _colorLuminance.colorLuminance(normalColor, -0.04);\n    activeColor = _colorLuminance.colorLuminance(normalColor, -0.14);\n  }\n\n  function shouldSetConfirmButtonColor(color) {\n    if (targetedConfirm && params.confirmButtonColor) {\n      target.style.backgroundColor = color;\n    }\n  }\n\n  switch (e.type) {\n    case 'mouseover':\n      shouldSetConfirmButtonColor(hoverColor);\n      break;\n\n    case 'mouseout':\n      shouldSetConfirmButtonColor(normalColor);\n      break;\n\n    case 'mousedown':\n      shouldSetConfirmButtonColor(activeColor);\n      break;\n\n    case 'mouseup':\n      shouldSetConfirmButtonColor(hoverColor);\n      break;\n\n    case 'focus':\n      var $confirmButton = modal.querySelector('button.confirm');\n      var $cancelButton = modal.querySelector('button.cancel');\n\n      if (targetedConfirm) {\n        $cancelButton.style.boxShadow = 'none';\n      } else {\n        $confirmButton.style.boxShadow = 'none';\n      }\n\n      break;\n\n    case 'click':\n      var clickedOnModal = modal === target;\n\n      var clickedOnModalChild = _hasClass$isDescendant.isDescendant(modal, target); // Ignore click outside if allowOutsideClick is false\n\n\n      if (!clickedOnModal && !clickedOnModalChild && modalIsVisible && !params.allowOutsideClick) {\n        break;\n      }\n\n      if (targetedConfirm && doneFunctionExists && modalIsVisible) {\n        handleConfirm(modal, params);\n      } else if (doneFunctionExists && modalIsVisible || targetedOverlay) {\n        handleCancel(modal, params);\n      } else if (_hasClass$isDescendant.isDescendant(modal, target) && target.tagName === 'BUTTON') {\n        sweetAlert.close();\n      }\n\n      break;\n  }\n};\n/*\r\n *  User clicked on \"Confirm\"/\"OK\"\r\n */\n\n\nvar handleConfirm = function handleConfirm(modal, params) {\n  var callbackValue = true;\n\n  if (_hasClass$isDescendant.hasClass(modal, 'show-input')) {\n    callbackValue = modal.querySelector('input').value;\n\n    if (!callbackValue) {\n      callbackValue = '';\n    }\n  }\n\n  params.doneFunction(callbackValue);\n\n  if (params.closeOnConfirm) {\n    sweetAlert.close();\n  } // Disable cancel and confirm button if the parameter is true\n\n\n  if (params.showLoaderOnConfirm) {\n    sweetAlert.disableButtons();\n  }\n};\n/*\r\n *  User clicked on \"Cancel\"\r\n */\n\n\nvar handleCancel = function handleCancel(modal, params) {\n  // Check if callback function expects a parameter (to track cancel actions)\n  var functionAsStr = String(params.doneFunction).replace(/\\s/g, '');\n  var functionHandlesCancel = functionAsStr.substring(0, 9) === 'function(' && functionAsStr.substring(9, 10) !== ')';\n\n  if (functionHandlesCancel) {\n    params.doneFunction(false);\n  }\n\n  if (params.closeOnCancel) {\n    sweetAlert.close();\n  }\n};\n\nexports['default'] = {\n  handleButton: handleButton,\n  handleConfirm: handleConfirm,\n  handleCancel: handleCancel\n};\nmodule.exports = exports['default'];","map":{"version":3,"sources":["C:/Users/santosh.tondihal/MERN/Tutorial/Finall/Tutorial-App/client/node_modules/sweetalert-react/node_modules/sweetalert/lib/modules/handle-click.js"],"names":["Object","defineProperty","exports","value","_colorLuminance","require","_getModal","_hasClass$isDescendant","handleButton","event","params","modal","e","window","target","srcElement","targetedConfirm","className","indexOf","targetedOverlay","modalIsVisible","hasClass","doneFunctionExists","doneFunction","getAttribute","normalColor","hoverColor","activeColor","confirmButtonColor","colorLuminance","shouldSetConfirmButtonColor","color","style","backgroundColor","type","$confirmButton","querySelector","$cancelButton","boxShadow","clickedOnModal","clickedOnModalChild","isDescendant","allowOutsideClick","handleConfirm","handleCancel","tagName","sweetAlert","close","callbackValue","closeOnConfirm","showLoaderOnConfirm","disableButtons","functionAsStr","String","replace","functionHandlesCancel","substring","closeOnCancel","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,IAAIC,eAAe,GAAGC,OAAO,CAAC,SAAD,CAA7B;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,mBAAD,CAAvB;;AAEA,IAAIE,sBAAsB,GAAGF,OAAO,CAAC,cAAD,CAApC;AAEA;;;;;AAGA,IAAIG,YAAY,GAAG,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,MAA7B,EAAqCC,KAArC,EAA4C;AAC7D,MAAIC,CAAC,GAAGH,KAAK,IAAII,MAAM,CAACJ,KAAxB;AACA,MAAIK,MAAM,GAAGF,CAAC,CAACE,MAAF,IAAYF,CAAC,CAACG,UAA3B;AAEA,MAAIC,eAAe,GAAGF,MAAM,CAACG,SAAP,CAAiBC,OAAjB,CAAyB,SAAzB,MAAwC,CAAC,CAA/D;AACA,MAAIC,eAAe,GAAGL,MAAM,CAACG,SAAP,CAAiBC,OAAjB,CAAyB,eAAzB,MAA8C,CAAC,CAArE;;AACA,MAAIE,cAAc,GAAGb,sBAAsB,CAACc,QAAvB,CAAgCV,KAAhC,EAAuC,SAAvC,CAArB;;AACA,MAAIW,kBAAkB,GAAGZ,MAAM,CAACa,YAAP,IAAuBZ,KAAK,CAACa,YAAN,CAAmB,wBAAnB,MAAiD,MAAjG,CAP6D,CAS7D;AACA;;AACA,MAAIC,WAAJ,EAAiBC,UAAjB,EAA6BC,WAA7B;;AACA,MAAIX,eAAe,IAAIN,MAAM,CAACkB,kBAA9B,EAAkD;AAChDH,IAAAA,WAAW,GAAGf,MAAM,CAACkB,kBAArB;AACAF,IAAAA,UAAU,GAAGtB,eAAe,CAACyB,cAAhB,CAA+BJ,WAA/B,EAA4C,CAAC,IAA7C,CAAb;AACAE,IAAAA,WAAW,GAAGvB,eAAe,CAACyB,cAAhB,CAA+BJ,WAA/B,EAA4C,CAAC,IAA7C,CAAd;AACD;;AAED,WAASK,2BAAT,CAAqCC,KAArC,EAA4C;AAC1C,QAAIf,eAAe,IAAIN,MAAM,CAACkB,kBAA9B,EAAkD;AAChDd,MAAAA,MAAM,CAACkB,KAAP,CAAaC,eAAb,GAA+BF,KAA/B;AACD;AACF;;AAED,UAAQnB,CAAC,CAACsB,IAAV;AACE,SAAK,WAAL;AACEJ,MAAAA,2BAA2B,CAACJ,UAAD,CAA3B;AACA;;AAEF,SAAK,UAAL;AACEI,MAAAA,2BAA2B,CAACL,WAAD,CAA3B;AACA;;AAEF,SAAK,WAAL;AACEK,MAAAA,2BAA2B,CAACH,WAAD,CAA3B;AACA;;AAEF,SAAK,SAAL;AACEG,MAAAA,2BAA2B,CAACJ,UAAD,CAA3B;AACA;;AAEF,SAAK,OAAL;AACE,UAAIS,cAAc,GAAGxB,KAAK,CAACyB,aAAN,CAAoB,gBAApB,CAArB;AACA,UAAIC,aAAa,GAAG1B,KAAK,CAACyB,aAAN,CAAoB,eAApB,CAApB;;AAEA,UAAIpB,eAAJ,EAAqB;AACnBqB,QAAAA,aAAa,CAACL,KAAd,CAAoBM,SAApB,GAAgC,MAAhC;AACD,OAFD,MAEO;AACLH,QAAAA,cAAc,CAACH,KAAf,CAAqBM,SAArB,GAAiC,MAAjC;AACD;;AACD;;AAEF,SAAK,OAAL;AACE,UAAIC,cAAc,GAAG5B,KAAK,KAAKG,MAA/B;;AACA,UAAI0B,mBAAmB,GAAGjC,sBAAsB,CAACkC,YAAvB,CAAoC9B,KAApC,EAA2CG,MAA3C,CAA1B,CAFF,CAIE;;;AACA,UAAI,CAACyB,cAAD,IAAmB,CAACC,mBAApB,IAA2CpB,cAA3C,IAA6D,CAACV,MAAM,CAACgC,iBAAzE,EAA4F;AAC1F;AACD;;AAED,UAAI1B,eAAe,IAAIM,kBAAnB,IAAyCF,cAA7C,EAA6D;AAC3DuB,QAAAA,aAAa,CAAChC,KAAD,EAAQD,MAAR,CAAb;AACD,OAFD,MAEO,IAAIY,kBAAkB,IAAIF,cAAtB,IAAwCD,eAA5C,EAA6D;AAClEyB,QAAAA,YAAY,CAACjC,KAAD,EAAQD,MAAR,CAAZ;AACD,OAFM,MAEA,IAAIH,sBAAsB,CAACkC,YAAvB,CAAoC9B,KAApC,EAA2CG,MAA3C,KAAsDA,MAAM,CAAC+B,OAAP,KAAmB,QAA7E,EAAuF;AAC5FC,QAAAA,UAAU,CAACC,KAAX;AACD;;AACD;AA5CJ;AA8CD,CAtED;AAwEA;;;;;AAGA,IAAIJ,aAAa,GAAG,SAASA,aAAT,CAAuBhC,KAAvB,EAA8BD,MAA9B,EAAsC;AACxD,MAAIsC,aAAa,GAAG,IAApB;;AAEA,MAAIzC,sBAAsB,CAACc,QAAvB,CAAgCV,KAAhC,EAAuC,YAAvC,CAAJ,EAA0D;AACxDqC,IAAAA,aAAa,GAAGrC,KAAK,CAACyB,aAAN,CAAoB,OAApB,EAA6BjC,KAA7C;;AAEA,QAAI,CAAC6C,aAAL,EAAoB;AAClBA,MAAAA,aAAa,GAAG,EAAhB;AACD;AACF;;AAEDtC,EAAAA,MAAM,CAACa,YAAP,CAAoByB,aAApB;;AAEA,MAAItC,MAAM,CAACuC,cAAX,EAA2B;AACzBH,IAAAA,UAAU,CAACC,KAAX;AACD,GAfuD,CAgBxD;;;AACA,MAAIrC,MAAM,CAACwC,mBAAX,EAAgC;AAC9BJ,IAAAA,UAAU,CAACK,cAAX;AACD;AACF,CApBD;AAsBA;;;;;AAGA,IAAIP,YAAY,GAAG,SAASA,YAAT,CAAsBjC,KAAtB,EAA6BD,MAA7B,EAAqC;AACtD;AACA,MAAI0C,aAAa,GAAGC,MAAM,CAAC3C,MAAM,CAACa,YAAR,CAAN,CAA4B+B,OAA5B,CAAoC,KAApC,EAA2C,EAA3C,CAApB;AACA,MAAIC,qBAAqB,GAAGH,aAAa,CAACI,SAAd,CAAwB,CAAxB,EAA2B,CAA3B,MAAkC,WAAlC,IAAiDJ,aAAa,CAACI,SAAd,CAAwB,CAAxB,EAA2B,EAA3B,MAAmC,GAAhH;;AAEA,MAAID,qBAAJ,EAA2B;AACzB7C,IAAAA,MAAM,CAACa,YAAP,CAAoB,KAApB;AACD;;AAED,MAAIb,MAAM,CAAC+C,aAAX,EAA0B;AACxBX,IAAAA,UAAU,CAACC,KAAX;AACD;AACF,CAZD;;AAcA7C,OAAO,CAAC,SAAD,CAAP,GAAqB;AACnBM,EAAAA,YAAY,EAAEA,YADK;AAEnBmC,EAAAA,aAAa,EAAEA,aAFI;AAGnBC,EAAAA,YAAY,EAAEA;AAHK,CAArB;AAKAc,MAAM,CAACxD,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB","sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', {\r\n  value: true\r\n});\r\n\r\nvar _colorLuminance = require('./utils');\r\n\r\nvar _getModal = require('./handle-swal-dom');\r\n\r\nvar _hasClass$isDescendant = require('./handle-dom');\r\n\r\n/*\r\n * User clicked on \"Confirm\"/\"OK\" or \"Cancel\"\r\n */\r\nvar handleButton = function handleButton(event, params, modal) {\r\n  var e = event || window.event;\r\n  var target = e.target || e.srcElement;\r\n\r\n  var targetedConfirm = target.className.indexOf('confirm') !== -1;\r\n  var targetedOverlay = target.className.indexOf('sweet-overlay') !== -1;\r\n  var modalIsVisible = _hasClass$isDescendant.hasClass(modal, 'visible');\r\n  var doneFunctionExists = params.doneFunction && modal.getAttribute('data-has-done-function') === 'true';\r\n\r\n  // Since the user can change the background-color of the confirm button programmatically,\r\n  // we must calculate what the color should be on hover/active\r\n  var normalColor, hoverColor, activeColor;\r\n  if (targetedConfirm && params.confirmButtonColor) {\r\n    normalColor = params.confirmButtonColor;\r\n    hoverColor = _colorLuminance.colorLuminance(normalColor, -0.04);\r\n    activeColor = _colorLuminance.colorLuminance(normalColor, -0.14);\r\n  }\r\n\r\n  function shouldSetConfirmButtonColor(color) {\r\n    if (targetedConfirm && params.confirmButtonColor) {\r\n      target.style.backgroundColor = color;\r\n    }\r\n  }\r\n\r\n  switch (e.type) {\r\n    case 'mouseover':\r\n      shouldSetConfirmButtonColor(hoverColor);\r\n      break;\r\n\r\n    case 'mouseout':\r\n      shouldSetConfirmButtonColor(normalColor);\r\n      break;\r\n\r\n    case 'mousedown':\r\n      shouldSetConfirmButtonColor(activeColor);\r\n      break;\r\n\r\n    case 'mouseup':\r\n      shouldSetConfirmButtonColor(hoverColor);\r\n      break;\r\n\r\n    case 'focus':\r\n      var $confirmButton = modal.querySelector('button.confirm');\r\n      var $cancelButton = modal.querySelector('button.cancel');\r\n\r\n      if (targetedConfirm) {\r\n        $cancelButton.style.boxShadow = 'none';\r\n      } else {\r\n        $confirmButton.style.boxShadow = 'none';\r\n      }\r\n      break;\r\n\r\n    case 'click':\r\n      var clickedOnModal = modal === target;\r\n      var clickedOnModalChild = _hasClass$isDescendant.isDescendant(modal, target);\r\n\r\n      // Ignore click outside if allowOutsideClick is false\r\n      if (!clickedOnModal && !clickedOnModalChild && modalIsVisible && !params.allowOutsideClick) {\r\n        break;\r\n      }\r\n\r\n      if (targetedConfirm && doneFunctionExists && modalIsVisible) {\r\n        handleConfirm(modal, params);\r\n      } else if (doneFunctionExists && modalIsVisible || targetedOverlay) {\r\n        handleCancel(modal, params);\r\n      } else if (_hasClass$isDescendant.isDescendant(modal, target) && target.tagName === 'BUTTON') {\r\n        sweetAlert.close();\r\n      }\r\n      break;\r\n  }\r\n};\r\n\r\n/*\r\n *  User clicked on \"Confirm\"/\"OK\"\r\n */\r\nvar handleConfirm = function handleConfirm(modal, params) {\r\n  var callbackValue = true;\r\n\r\n  if (_hasClass$isDescendant.hasClass(modal, 'show-input')) {\r\n    callbackValue = modal.querySelector('input').value;\r\n\r\n    if (!callbackValue) {\r\n      callbackValue = '';\r\n    }\r\n  }\r\n\r\n  params.doneFunction(callbackValue);\r\n\r\n  if (params.closeOnConfirm) {\r\n    sweetAlert.close();\r\n  }\r\n  // Disable cancel and confirm button if the parameter is true\r\n  if (params.showLoaderOnConfirm) {\r\n    sweetAlert.disableButtons();\r\n  }\r\n};\r\n\r\n/*\r\n *  User clicked on \"Cancel\"\r\n */\r\nvar handleCancel = function handleCancel(modal, params) {\r\n  // Check if callback function expects a parameter (to track cancel actions)\r\n  var functionAsStr = String(params.doneFunction).replace(/\\s/g, '');\r\n  var functionHandlesCancel = functionAsStr.substring(0, 9) === 'function(' && functionAsStr.substring(9, 10) !== ')';\r\n\r\n  if (functionHandlesCancel) {\r\n    params.doneFunction(false);\r\n  }\r\n\r\n  if (params.closeOnCancel) {\r\n    sweetAlert.close();\r\n  }\r\n};\r\n\r\nexports['default'] = {\r\n  handleButton: handleButton,\r\n  handleConfirm: handleConfirm,\r\n  handleCancel: handleCancel\r\n};\r\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}